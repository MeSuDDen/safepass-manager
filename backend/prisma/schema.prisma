generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  role             String    @default("user")
  createdAt        DateTime  @default(now())
  lastLoginAt      DateTime?
  emailVerified    Boolean   @default(false)
  profileCompleted Boolean   @default(false)

  profile           UserProfile?
  tokens            UserTokens?
  passwords         Passwords?
  logs              Log[]
  emailVerification EmailVerification?
  passwordReset     PasswordReset?
  folders           Folder[]
  userCredentials   UserCredentials[]
}

model Passwords {
  id             String @id @default(uuid())
  userId         String @unique
  password       String
  masterPassword String
  User           User   @relation(fields: [userId], references: [id])
}

model UserCredentials {
  id          String   @id @default(uuid()) // id будет строкой UUID
  title       String // Название учетной записи
  username    String // Логин для учетной записи
  password    String // Пароль
  url         String // URL ресурса
  description String // Описание учетной записи
  folderId    String? // id папки (может быть null)
  createdAt   DateTime @default(now()) // Время создания
  updatedAt   DateTime @updatedAt // Время последнего обновления
  userId      String // id пользователя
  user        User     @relation(fields: [userId], references: [id]) // Связь с пользователем
  folder      Folder?  @relation(fields: [folderId], references: [id]) // Связь с папкой
  Tag         Tag[]
}

model Folder {
  id              String            @id @default(uuid()) // id папки
  name            String // Название папки
  userId          String // id пользователя
  createdAt       DateTime          @default(now()) // Время создания
  updatedAt       DateTime          @default(now()) @updatedAt // Время последнего обновления
  user            User              @relation(fields: [userId], references: [id]) // Связь с пользователем
  userCredentials UserCredentials[] // Связь с учетными записями
}

model Tag {
  id                String           @id @default(uuid())
  name              String           @unique
  userCredentialsId String?
  UserCredentials   UserCredentials? @relation(fields: [userCredentialsId], references: [id])
}

model PasswordReset {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  code       String
  hash       String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  isVerified Boolean
}

model UserProfile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  firstName   String?
  lastName    String?
  middleName  String?
  phoneNumber String?   @unique
  birthDate   DateTime?
  username    String?   @unique
  position    String?
}

model UserTokens {
  id                           String  @id @default(uuid())
  userId                       String  @unique
  user                         User    @relation(fields: [userId], references: [id])
  jwtToken                     String?
  refreshToken                 String?
  isMasterPasswordVerified     Boolean @default(false) // 2FA статус
  failedMasterPasswordAttempts Int     @default(0) // Количество неудачных попыток ввода мастер-пароля
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  code      String
  hash      String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  createdAt DateTime @default(now())
}
